{"ast":null,"code":"var _arity =\n/*#__PURE__*/\nrequire('./internal/_arity');\n\nvar _pipe =\n/*#__PURE__*/\nrequire('./internal/_pipe');\n\nvar reduce =\n/*#__PURE__*/\nrequire('./reduce');\n\nvar tail =\n/*#__PURE__*/\nrequire('./tail');\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\n\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}\n\nmodule.exports = pipe;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/pipe.js"],"names":["_arity","require","_pipe","reduce","tail","pipe","arguments","length","Error","module","exports"],"mappings":"AAAA,IAAIA,MAAM;AAAG;AAAaC,OAAO,CAAC,mBAAD,CAAjC;;AAEA,IAAIC,KAAK;AAAG;AAAaD,OAAO,CAAC,kBAAD,CAAhC;;AAEA,IAAIE,MAAM;AAAG;AAAaF,OAAO,CAAC,UAAD,CAAjC;;AAEA,IAAIG,IAAI;AAAG;AAAaH,OAAO,CAAC,QAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASI,IAAT,GAAgB;AACd,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,SAAOR,MAAM,CAACM,SAAS,CAAC,CAAD,CAAT,CAAaC,MAAd,EAAsBJ,MAAM,CAACD,KAAD,EAAQI,SAAS,CAAC,CAAD,CAAjB,EAAsBF,IAAI,CAACE,SAAD,CAA1B,CAA5B,CAAb;AACD;;AACDG,MAAM,CAACC,OAAP,GAAiBL,IAAjB","sourcesContent":["var _arity = /*#__PURE__*/require('./internal/_arity');\n\nvar _pipe = /*#__PURE__*/require('./internal/_pipe');\n\nvar reduce = /*#__PURE__*/require('./reduce');\n\nvar tail = /*#__PURE__*/require('./tail');\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\n\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}\nmodule.exports = pipe;"]},"metadata":{},"sourceType":"script"}