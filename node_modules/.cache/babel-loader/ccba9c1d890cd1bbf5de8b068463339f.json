{"ast":null,"code":"import React, { Component } from 'react';\nimport './App.css';\n\nclass TextScramble extends Component {\n  constructor(el) {\n    super();\n    this.el = el;\n    this.chars = '!<>-_\\\\/[]{}—=+*^?#________';\n    this.update = this.update.bind(this);\n  }\n\n  setText(newText) {\n    const oldText = this.el.innerText;\n    const length = Math.max(oldText.length, newText.length);\n    const promise = new Promise(resolve => this.resolve = resolve);\n    this.queue = [];\n\n    for (let i = 0; i < length; i++) {\n      const from = oldText[i] || '';\n      const to = newText[i] || '';\n      const start = Math.floor(Math.random() * 40);\n      const end = start + Math.floor(Math.random() * 40);\n      this.queue.push({\n        from,\n        to,\n        start,\n        end\n      });\n    }\n\n    cancelAnimationFrame(this.frameRequest);\n    this.frame = 0;\n    this.update();\n    return promise;\n  }\n\n  update() {\n    let output = '';\n    let complete = 0;\n\n    for (let i = 0, n = this.queue.length; i < n; i++) {\n      let _this$queue$i = this.queue[i],\n          from = _this$queue$i.from,\n          to = _this$queue$i.to,\n          start = _this$queue$i.start,\n          end = _this$queue$i.end,\n          char = _this$queue$i.char;\n\n      if (this.frame >= end) {\n        complete++;\n        output += to;\n      } else if (this.frame >= start) {\n        if (!char || Math.random() < 0.28) {\n          char = this.randomChar();\n          this.queue[i].char = char;\n        }\n\n        output += \"<span class=\\\"dud\\\">\".concat(char, \"</span>\");\n      } else {\n        output += from;\n      }\n    }\n\n    this.el.innerHTML = output;\n\n    if (complete === this.queue.length) {\n      this.resolve();\n    } else {\n      this.frameRequest = requestAnimationFrame(this.update);\n      this.frame++;\n    }\n  }\n\n  randomChar() {\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\n  }\n\n} // ——————————————————————————————————————————————————\n// Example\n// ——————————————————————————————————————————————————\n\n\nconst phrases = ['< DANIELA QUINTANA >', 'FRONT-END DEVELOPER'];\nconst el = document.querySelector('.text');\nconst fx = new TextScramble(el);\nlet counter = 0;\n\nconst next = () => {\n  fx.setText(phrases[counter]).then(() => {\n    setTimeout(next, 2000);\n  });\n  counter = (counter + 1) % phrases.length;\n};\n\nnext();\nexport default TextScramble;","map":{"version":3,"sources":["/Users/osx/Desktop/Box Sync/Laboratoria/Proyectos/Portafolio/my-app/src/App.js"],"names":["React","Component","TextScramble","constructor","el","chars","update","bind","setText","newText","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","phrases","document","querySelector","fx","counter","next","then","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass TextScramble extends Component {\n  constructor(el) {\n    super();\n    this.el = el;\n    this.chars = '!<>-_\\\\/[]{}—=+*^?#________';\n    this.update = this.update.bind(this);\n  }\n  \n  setText(newText) {\n    const oldText = this.el.innerText;\n    const length = Math.max(oldText.length, newText.length);\n    const promise = new Promise(resolve => this.resolve = resolve);\n    this.queue = [];\n    for (let i = 0; i < length; i++) {\n      const from = oldText[i] || '';\n      const to = newText[i] || '';\n      const start = Math.floor(Math.random() * 40);\n      const end = start + Math.floor(Math.random() * 40);\n      this.queue.push({ from, to, start, end });\n    }\n    cancelAnimationFrame(this.frameRequest);\n    this.frame = 0;\n    this.update();\n    return promise;\n  }\n  \n  update() {\n    let output = '';\n    let complete = 0;\n    for (let i = 0, n = this.queue.length; i < n; i++) {\n      let { from, to, start, end, char } = this.queue[i];\n      if (this.frame >= end) {\n        complete++;\n        output += to;\n      } else if (this.frame >= start) {\n        if (!char || Math.random() < 0.28) {\n          char = this.randomChar();\n          this.queue[i].char = char;\n        }\n        output += `<span class=\"dud\">${char}</span>`;\n      } else {\n        output += from;\n      }\n    }\n    this.el.innerHTML = output;\n    if (complete === this.queue.length) {\n      this.resolve();\n    } else {\n      this.frameRequest = requestAnimationFrame(this.update);\n      this.frame++;\n    }\n  }\n  randomChar() {\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\n  }}\n\n\n// ——————————————————————————————————————————————————\n// Example\n// ——————————————————————————————————————————————————\n\nconst phrases = [\n'< DANIELA QUINTANA >',\n'FRONT-END DEVELOPER'];\n\n\nconst el = document.querySelector('.text');\nconst fx = new TextScramble(el);\n\nlet counter = 0;\nconst next = () => {\n  fx.setText(phrases[counter]).then(() => {\n    setTimeout(next, 2000);\n  });\n  counter = (counter + 1) % phrases.length;\n};\n\nnext();\n\nexport default TextScramble;\n"]},"metadata":{},"sourceType":"module"}