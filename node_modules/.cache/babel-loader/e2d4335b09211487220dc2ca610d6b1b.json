{"ast":null,"code":"var _curry2 =\n/*#__PURE__*/\nrequire('./internal/_curry2');\n\nvar _isNumber =\n/*#__PURE__*/\nrequire('./internal/_isNumber');\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\n\n\nvar range =\n/*#__PURE__*/\n_curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n\n  var result = [];\n  var n = from;\n\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n\n  return result;\n});\n\nmodule.exports = range;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/range.js"],"names":["_curry2","require","_isNumber","range","from","to","TypeError","result","n","push","module","exports"],"mappings":"AAAA,IAAIA,OAAO;AAAG;AAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,SAAS;AAAG;AAAaD,OAAO,CAAC,sBAAD,CAApC;AAEA;;;;;;;;;;;;;;;;;;AAkBA,IAAIE,KAAK;AAAG;AAAaH,OAAO,CAAC,SAASG,KAAT,CAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACxD,MAAI,EAAEH,SAAS,CAACE,IAAD,CAAT,IAAmBF,SAAS,CAACG,EAAD,CAA9B,CAAJ,EAAyC;AACvC,UAAM,IAAIC,SAAJ,CAAc,yCAAd,CAAN;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,CAAC,GAAGJ,IAAR;;AACA,SAAOI,CAAC,GAAGH,EAAX,EAAe;AACbE,IAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOD,MAAP;AACD,CAX+B,CAAhC;;AAYAG,MAAM,CAACC,OAAP,GAAiBR,KAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _isNumber = /*#__PURE__*/require('./internal/_isNumber');\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\n\n\nvar range = /*#__PURE__*/_curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\nmodule.exports = range;"]},"metadata":{},"sourceType":"script"}