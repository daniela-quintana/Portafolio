{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _default2 = _interopDefault(require('ramda/src/range'));\n\nvar _default5 = _interopDefault(require('ramda/src/map'));\n\nvar _default4 = _interopDefault(require('ramda/src/addIndex'));\n\nvar _default3 = _interopDefault(require('ramda/src/reduce'));\n\nvar _default2$1 = _interopDefault(require('ramda/src/concat'));\n\nvar _default = _interopDefault(require('ramda/src/pipe'));\n\nvar _default14 = _interopDefault(require('ramda/src/flatten'));\n\nvar _default13 = _interopDefault(require('ramda/src/subtract'));\n\nvar _default12 = _interopDefault(require('ramda/src/juxt'));\n\nvar _default11 = _interopDefault(require('ramda/src/lt'));\n\nvar _default10 = _interopDefault(require('ramda/src/findIndex'));\n\nvar _default9 = _interopDefault(require('ramda/src/add'));\n\nvar _default8 = _interopDefault(require('ramda/src/scan'));\n\nvar _default6 = _interopDefault(require('ramda/src/__'));\n\nvar _default6$1 = _interopDefault(require('ramda/src/divide'));\n\nvar _default5$1 = _interopDefault(require('ramda/src/repeat'));\n\nvar _default4$1 = _interopDefault(require('ramda/src/always'));\n\nvar _default15 = _interopDefault(require('ramda/src/omit'));\n\nvar _default14$1 = _interopDefault(require('ramda/src/drop'));\n\nvar _default13$1 = _interopDefault(require('ramda/src/isNil'));\n\nvar _default12$1 = _interopDefault(require('ramda/src/max'));\n\nvar _default11$1 = _interopDefault(require('ramda/src/is'));\n\nvar _default10$1 = _interopDefault(require('ramda/src/equals'));\n\nvar _default9$1 = _interopDefault(require('ramda/src/length'));\n\nvar _default7 = _interopDefault(require('ramda/src/pathOr'));\n\nvar _default5$2 = _interopDefault(require('ramda/src/prop'));\n\nvar _default4$2 = _interopDefault(require('ramda/src/identity'));\n\nvar _default3$1 = _interopDefault(require('ramda/src/nth'));\n\nvar _default2$2 = _interopDefault(require('ramda/src/not'));\n\nvar _default$1 = _interopDefault(require('ramda/src/head'));\n\nvar React = require('react');\n\nvar setObservableConfig = _interopDefault(require('recompose/setObservableConfig'));\n\nvar createEventHandler = _interopDefault(require('recompose/createEventHandler'));\n\nvar compose = _interopDefault(require('recompose/compose'));\n\nvar mapPropsStream = _interopDefault(require('recompose/mapPropsStream'));\n\nvar withHandlers = _interopDefault(require('recompose/withHandlers'));\n\nvar withPropsOnChange = _interopDefault(require('recompose/withPropsOnChange'));\n\nvar lifecycle = _interopDefault(require('recompose/lifecycle'));\n\nvar operators = require('rxjs/operators');\n\nvar rxjs = require('rxjs');\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar NO_BREAK_SPACE = 160;\n\nvar PRINTABLE_CHAR_CODES = _default2(33, 127);\n\nvar NO_BREAK_SPACE_CHAR_CODE = NO_BREAK_SPACE;\nvar noBreakSpace = String.fromCharCode(NO_BREAK_SPACE_CHAR_CODE);\n\nvar randomChar = function randomChar() {\n  return _default(_default2$1([NO_BREAK_SPACE_CHAR_CODE]), function (array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }, String.fromCharCode)(PRINTABLE_CHAR_CODES);\n};\n\nvar array2String = _default3(_default2$1, '');\n\nvar mixcramble = function mixcramble(_) {\n  var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var noBreakSpaceFlag = arguments[3];\n  return _default(_default4(_default5)(function (d, i) {\n    return d === 0 ? randomChar() : text[i] || (noBreakSpaceFlag ? noBreakSpace : '');\n  }), array2String)(mask);\n};\n\nvar descramble = function descramble() {\n  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var noBreakSpaceFlag = arguments[3];\n  return _default(_default4(_default5)(function (d, i) {\n    return d === 0 ? result[i] || (noBreakSpaceFlag ? noBreakSpace : '') : text[i] || (noBreakSpaceFlag ? noBreakSpace : '');\n  }), array2String)(mask);\n};\n\nvar scramble = function scramble() {\n  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var noBreakSpaceFlag = arguments[3];\n  return _default(_default4(_default5)(function (d, i) {\n    return d === 0 ? result[i] || (noBreakSpaceFlag ? noBreakSpace : '') : randomChar();\n  }), array2String)(mask);\n};\n\nvar getRandomMask = _default(_default2(0), _default5(_default(Math.random, Math.round)));\n\nvar getFullMask = _default(_default2(0), _default5(_default4$1(1)));\n\nvar getForwardMask = function getForwardMask(length) {\n  var roll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : length;\n  var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : roll;\n\n  if (count <= 1) {\n    return _default5$1(1, length);\n  }\n\n  var base = _default(_default6$1, Math.floor, _default5$1(_default6, length))(roll, length);\n\n  for (var i = 0; i < roll % length; i++) {\n    base[i]++;\n  }\n\n  return _default(_default8(_default9, 0), _default10(_default11(roll - count)), _default12([_default5$1(1), _default(_default13(length), _default5$1(0))]), _default14)(base);\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar config = {\n  fromESObservable: rxjs.from,\n  toESObservable: function toESObservable(stream) {\n    return stream;\n  }\n};\nsetObservableConfig(config);\nvar omitProps = ['autoStart', 'bindMethod', 'mouseEnterTrigger', 'mouseLeaveTrigger', 'noBreakSpace', 'pause', 'preScramble', 'reset', 'restart', 'speed', 'start', 'steps', 'text'];\nvar speed = {\n  fast: 25,\n  medium: 50,\n  slow: 100\n};\n\nvar getPauserStream = function getPauserStream(autoStart$, isQueueEmpty$, pause$, reset$, start$) {\n  return rxjs.merge(rxjs.combineLatest(autoStart$, reset$.pipe(operators.startWith(''))).pipe(operators.map(_default$1), operators.map(_default2$2)), pause$.pipe(operators.mapTo(true)), start$.pipe(operators.withLatestFrom(isQueueEmpty$), operators.map(_default3$1(1))), isQueueEmpty$.pipe(operators.filter(_default4$2)));\n};\n\nvar getPropStream = function getPropStream(props$, key) {\n  return props$.pipe(operators.pluck(key), operators.distinctUntilChanged());\n};\n\nvar Scramble = compose(mapPropsStream(function (props$) {\n  var _createEventHandler = createEventHandler(),\n      start = _createEventHandler.handler,\n      start$ = _createEventHandler.stream;\n\n  var _createEventHandler2 = createEventHandler(),\n      pause = _createEventHandler2.handler,\n      pause$ = _createEventHandler2.stream;\n\n  var _createEventHandler3 = createEventHandler(),\n      reset = _createEventHandler3.handler,\n      reset$ = _createEventHandler3.stream;\n\n  var queue$ = new rxjs.Subject();\n  var counter$ = new rxjs.Subject();\n  var result$ = new rxjs.Subject();\n  var autoStart$ = getPropStream(props$, 'autoStart');\n  var preScramble$ = getPropStream(props$, 'preScramble');\n  var noBreakSpace$ = getPropStream(props$, 'noBreakSpace');\n  var initText$ = getPropStream(props$, 'text').pipe(operators.share());\n  var steps$ = getPropStream(props$, 'steps').pipe(operators.share());\n  var period$ = getPropStream(props$, 'speed').pipe(operators.map(_default5$2(_default6, speed)));\n  var currentStep$ = queue$.pipe(operators.map(_default7({}, [0])), operators.share());\n  var isQueueEmpty$ = queue$.pipe(operators.map(_default(_default9$1, _default10$1(0))), operators.share());\n  var text$ = rxjs.merge(currentStep$.pipe(operators.pluck('text'), operators.filter(_default11$1(String))), rxjs.combineLatest(initText$, reset$.pipe(operators.startWith(''))).pipe(operators.map(_default$1))).pipe(operators.distinctUntilChanged());\n  var pauser$ = getPauserStream(autoStart$, isQueueEmpty$, pause$, reset$, start$);\n  var processor$ = currentStep$.pipe(operators.map(function (_ref) {\n    var action = _ref.action,\n        type = _ref.type;\n\n    switch (action) {\n      case '+':\n        return scramble;\n\n      case '-':\n        return type === 'forward' ? mixcramble : descramble;\n\n      default:\n        return _default4$2;\n    }\n  }));\n  var mask$ = rxjs.combineLatest(currentStep$, counter$, result$, text$).pipe(operators.map(function (_ref2) {\n    var _ref3 = slicedToArray(_ref2, 4),\n        _ref3$ = _ref3[0],\n        type = _ref3$.type,\n        roll = _ref3$.roll,\n        counter = _ref3[1],\n        result = _ref3[2],\n        text = _ref3[3];\n\n    var length = _default12$1(result.length, text.length);\n\n    switch (type) {\n      case 'random':\n        return getRandomMask(length);\n\n      case 'forward':\n        return getForwardMask(length, roll, counter);\n\n      case 'all':\n      default:\n        return getFullMask(length);\n    }\n  }));\n  var pausableTimer$ = rxjs.combineLatest(pauser$, period$).pipe(operators.switchMap(function (_ref4) {\n    var _ref5 = slicedToArray(_ref4, 2),\n        paused = _ref5[0],\n        period = _ref5[1];\n\n    return paused ? rxjs.empty() : // startWith 0 to send event immediately\n    rxjs.interval(period).pipe(operators.startWith(0));\n  }));\n  rxjs.merge(rxjs.combineLatest(initText$, preScramble$, reset$.pipe(operators.startWith(''))).pipe(operators.map(function (_ref6) {\n    var _ref7 = slicedToArray(_ref6, 2),\n        text = _ref7[0],\n        preScramble = _ref7[1];\n\n    return preScramble ? scramble(null, text, getFullMask(text.length)) : text;\n  })), pausableTimer$.pipe(operators.withLatestFrom(result$, text$, processor$, mask$, noBreakSpace$), operators.map(function (_ref8) {\n    var _ref9 = slicedToArray(_ref8, 6),\n        result = _ref9[1],\n        text = _ref9[2],\n        processor = _ref9[3],\n        mask = _ref9[4],\n        noBreakSpace = _ref9[5];\n\n    return processor(result, text, mask, noBreakSpace);\n  }))).subscribe(result$);\n  rxjs.merge(currentStep$.pipe(operators.pluck('roll')), pausableTimer$.pipe(operators.withLatestFrom(currentStep$, result$, text$, counter$), operators.map(function (_ref10) {\n    var _ref11 = slicedToArray(_ref10, 5),\n        _ref11$ = _ref11[1],\n        type = _ref11$.type,\n        action = _ref11$.action,\n        result = _ref11[2],\n        text = _ref11[3],\n        counter = _ref11[4];\n\n    if (!_default13$1(counter)) {\n      return counter - 1;\n    }\n\n    if (type === 'forward') {\n      return _default12$1(result.length, text.length) - 1;\n    }\n\n    if (action === '-' && text === result) {\n      return 0;\n    } // endless loop when counter is undefined\n\n\n    return;\n  }))).subscribe(counter$);\n  rxjs.merge(steps$, reset$.pipe(operators.withLatestFrom(steps$), operators.map(_default3$1(1))), counter$.pipe(operators.filter(_default10$1(0)), operators.withLatestFrom(queue$), operators.map(_default3$1(1)), operators.map(_default14$1(1)))).subscribe(queue$);\n  return rxjs.combineLatest(props$, result$).pipe(operators.map(function (_ref12) {\n    var _ref13 = slicedToArray(_ref12, 2),\n        props = _ref13[0],\n        result = _ref13[1];\n\n    return _extends({}, props, {\n      result: result,\n      start: start,\n      pause: pause,\n      reset: reset\n    });\n  }));\n}), withPropsOnChange(['start', 'reset'], function (props) {\n  return {\n    restart: function restart() {\n      props.reset();\n      props.start();\n    }\n  };\n}), lifecycle({\n  componentDidMount: function componentDidMount() {\n    var bindMethod = this.props.bindMethod;\n\n    if (bindMethod) {\n      bindMethod({\n        start: this.props.start,\n        pause: this.props.pause,\n        reset: this.props.reset,\n        restart: this.props.restart\n      });\n    }\n  }\n}), withHandlers({\n  onMouseEnter: function onMouseEnter(props) {\n    return function () {\n      var onMouseEnter = props.onMouseEnter,\n          mouseEnterTrigger = props.mouseEnterTrigger;\n      var action = props[mouseEnterTrigger];\n      _default11$1(Function, onMouseEnter) && onMouseEnter();\n      _default11$1(Function, action) && action();\n    };\n  },\n  onMouseLeave: function onMouseLeave(props) {\n    return function () {\n      var onMouseLeave = props.onMouseLeave,\n          mouseLeaveTrigger = props.mouseLeaveTrigger;\n      var action = props[mouseLeaveTrigger];\n      _default11$1(Function, onMouseLeave) && onMouseLeave();\n      _default11$1(Function, action) && action();\n    };\n  }\n}))(function (_ref14) {\n  var _ref14$result = _ref14.result,\n      result = _ref14$result === undefined ? '' : _ref14$result,\n      otherProps = objectWithoutProperties(_ref14, ['result']);\n  return React.createElement('span', _default15(omitProps, otherProps), result);\n});\nScramble.displayName = 'Scramble';\nScramble.propTypes = {\n  autoStart: PropTypes.bool,\n  bindMethod: PropTypes.func,\n  mouseEnterTrigger: PropTypes.oneOf(['start', 'pause', 'reset', 'restart']),\n  mouseLeaveTrigger: PropTypes.oneOf(['start', 'pause', 'reset', 'restart']),\n  noBreakSpace: PropTypes.bool,\n  speed: PropTypes.string,\n  steps: PropTypes.array,\n  text: PropTypes.string\n};\nScramble.defaultProps = {\n  autoStart: false,\n  preScramble: false,\n  steps: [],\n  speed: 'medium',\n  noBreakSpace: true\n};\n\nvar getNoBreakSpaces = _default(_default5$1(String.fromCharCode(NO_BREAK_SPACE)), _default3(_default2$1, ''));\n\nexports.default = Scramble;\nexports.getNoBreakSpaces = getNoBreakSpaces;","map":null,"metadata":{},"sourceType":"script"}