{"ast":null,"code":"var _curry2 =\n/*#__PURE__*/\nrequire('./internal/_curry2');\n\nvar _map =\n/*#__PURE__*/\nrequire('./internal/_map');\n\nvar curryN =\n/*#__PURE__*/\nrequire('./curryN');\n\nvar max =\n/*#__PURE__*/\nrequire('./max');\n\nvar pluck =\n/*#__PURE__*/\nrequire('./pluck');\n\nvar reduce =\n/*#__PURE__*/\nrequire('./reduce');\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\n\n\nvar converge =\n/*#__PURE__*/\n_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\nmodule.exports = converge;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/converge.js"],"names":["_curry2","require","_map","curryN","max","pluck","reduce","converge","after","fns","args","arguments","context","apply","fn","module","exports"],"mappings":"AAAA,IAAIA,OAAO;AAAG;AAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,IAAI;AAAG;AAAaD,OAAO,CAAC,iBAAD,CAA/B;;AAEA,IAAIE,MAAM;AAAG;AAAaF,OAAO,CAAC,UAAD,CAAjC;;AAEA,IAAIG,GAAG;AAAG;AAAaH,OAAO,CAAC,OAAD,CAA9B;;AAEA,IAAII,KAAK;AAAG;AAAaJ,OAAO,CAAC,SAAD,CAAhC;;AAEA,IAAIK,MAAM;AAAG;AAAaL,OAAO,CAAC,UAAD,CAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAIM,QAAQ;AAAG;AAAaP,OAAO,CAAC,SAASO,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B;AAChE,SAAON,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWI,GAAX,CAAd,CAAP,EAAuC,YAAY;AAC9D,QAAIC,IAAI,GAAGC,SAAX;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,WAAOJ,KAAK,CAACK,KAAN,CAAYD,OAAZ,EAAqBV,IAAI,CAAC,UAAUY,EAAV,EAAc;AAC7C,aAAOA,EAAE,CAACD,KAAH,CAASD,OAAT,EAAkBF,IAAlB,CAAP;AACD,KAF+B,EAE7BD,GAF6B,CAAzB,CAAP;AAGD,GANY,CAAb;AAOD,CARkC,CAAnC;;AASAM,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _map = /*#__PURE__*/require('./internal/_map');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\nvar max = /*#__PURE__*/require('./max');\n\nvar pluck = /*#__PURE__*/require('./pluck');\n\nvar reduce = /*#__PURE__*/require('./reduce');\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\n\n\nvar converge = /*#__PURE__*/_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\nmodule.exports = converge;"]},"metadata":{},"sourceType":"script"}