{"ast":null,"code":"var _curry2 =\n/*#__PURE__*/\nrequire('./internal/_curry2');\n\nvar map =\n/*#__PURE__*/\nrequire('./map');\n\nvar prop =\n/*#__PURE__*/\nrequire('./prop');\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\n\n\nvar pluck =\n/*#__PURE__*/\n_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n\nmodule.exports = pluck;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/pluck.js"],"names":["_curry2","require","map","prop","pluck","p","list","module","exports"],"mappings":"AAAA,IAAIA,OAAO;AAAG;AAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,GAAG;AAAG;AAAaD,OAAO,CAAC,OAAD,CAA9B;;AAEA,IAAIE,IAAI;AAAG;AAAaF,OAAO,CAAC,QAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIG,KAAK;AAAG;AAAaJ,OAAO,CAAC,SAASI,KAAT,CAAeC,CAAf,EAAkBC,IAAlB,EAAwB;AACvD,SAAOJ,GAAG,CAACC,IAAI,CAACE,CAAD,CAAL,EAAUC,IAAV,CAAV;AACD,CAF+B,CAAhC;;AAGAC,MAAM,CAACC,OAAP,GAAiBJ,KAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar map = /*#__PURE__*/require('./map');\n\nvar prop = /*#__PURE__*/require('./prop');\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\n\n\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nmodule.exports = pluck;"]},"metadata":{},"sourceType":"script"}