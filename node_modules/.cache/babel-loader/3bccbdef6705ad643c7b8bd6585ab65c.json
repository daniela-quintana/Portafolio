{"ast":null,"code":"var _curry2 =\n/*#__PURE__*/\nrequire('./internal/_curry2');\n\nvar _isArray =\n/*#__PURE__*/\nrequire('./internal/_isArray');\n\nvar _isFunction =\n/*#__PURE__*/\nrequire('./internal/_isFunction');\n\nvar _isString =\n/*#__PURE__*/\nrequire('./internal/_isString');\n\nvar toString =\n/*#__PURE__*/\nrequire('./toString');\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\n\n\nvar concat =\n/*#__PURE__*/\n_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\nmodule.exports = concat;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/concat.js"],"names":["_curry2","require","_isArray","_isFunction","_isString","toString","concat","a","b","TypeError","module","exports"],"mappings":"AAAA,IAAIA,OAAO;AAAG;AAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,QAAQ;AAAG;AAAaD,OAAO,CAAC,qBAAD,CAAnC;;AAEA,IAAIE,WAAW;AAAG;AAAaF,OAAO,CAAC,wBAAD,CAAtC;;AAEA,IAAIG,SAAS;AAAG;AAAaH,OAAO,CAAC,sBAAD,CAApC;;AAEA,IAAII,QAAQ;AAAG;AAAaJ,OAAO,CAAC,YAAD,CAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAIK,MAAM;AAAG;AAAaN,OAAO,CAAC,SAASM,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACtD,MAAIN,QAAQ,CAACK,CAAD,CAAZ,EAAiB;AACf,QAAIL,QAAQ,CAACM,CAAD,CAAZ,EAAiB;AACf,aAAOD,CAAC,CAACD,MAAF,CAASE,CAAT,CAAP;AACD;;AACD,UAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACG,CAAD,CAAR,GAAc,kBAA5B,CAAN;AACD;;AACD,MAAIJ,SAAS,CAACG,CAAD,CAAb,EAAkB;AAChB,QAAIH,SAAS,CAACI,CAAD,CAAb,EAAkB;AAChB,aAAOD,CAAC,GAAGC,CAAX;AACD;;AACD,UAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACG,CAAD,CAAR,GAAc,kBAA5B,CAAN;AACD;;AACD,MAAID,CAAC,IAAI,IAAL,IAAaJ,WAAW,CAACI,CAAC,CAAC,qBAAD,CAAF,CAA5B,EAAwD;AACtD,WAAOA,CAAC,CAAC,qBAAD,CAAD,CAAyBC,CAAzB,CAAP;AACD;;AACD,MAAID,CAAC,IAAI,IAAL,IAAaJ,WAAW,CAACI,CAAC,CAACD,MAAH,CAA5B,EAAwC;AACtC,WAAOC,CAAC,CAACD,MAAF,CAASE,CAAT,CAAP;AACD;;AACD,QAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACE,CAAD,CAAR,GAAc,iEAA5B,CAAN;AACD,CApBgC,CAAjC;;AAqBAG,MAAM,CAACC,OAAP,GAAiBL,MAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _isArray = /*#__PURE__*/require('./internal/_isArray');\n\nvar _isFunction = /*#__PURE__*/require('./internal/_isFunction');\n\nvar _isString = /*#__PURE__*/require('./internal/_isString');\n\nvar toString = /*#__PURE__*/require('./toString');\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\n\n\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nmodule.exports = concat;"]},"metadata":{},"sourceType":"script"}