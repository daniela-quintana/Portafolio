{"ast":null,"code":"var _jsxFileName = \"/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/src/components/ScrambleText.jsx\";\nimport React, { Component } from 'react';\nimport './ScrambleText.css';\n\nclass ScrambleText extends Component {\n  constructor(e) {\n    super(e);\n    this.state = {\n      e: this.e,\n      chars: '!<>-_\\\\/[]{}—=+*^?#________',\n      update: this.update,\n      innerText: this.innerText\n    };\n    this.update.bind(this);\n  }\n\n  setText(newText) {\n    const oldText = this.e.innerText;\n    console.log(this.e.innerText);\n    const length = Math.max(oldText.length, newText.length);\n    const promise = new Promise(resolve => this.resolve = resolve);\n    this.queue = [];\n\n    for (let i = 0; i < length; i++) {\n      const from = oldText[i] || '';\n      const to = newText[i] || '';\n      const start = Math.floor(Math.random() * 40);\n      const end = start + Math.floor(Math.random() * 40);\n      this.queue.push({\n        from,\n        to,\n        start,\n        end\n      });\n    }\n\n    cancelAnimationFrame(this.frameRequest);\n    this.frame = 0;\n    this.update();\n    return promise;\n  }\n\n  update() {\n    let output = '';\n    let complete = 0;\n\n    for (let i = 0, n = this.queue.length; i < n; i++) {\n      let _this$queue$i = this.queue[i],\n          from = _this$queue$i.from,\n          to = _this$queue$i.to,\n          start = _this$queue$i.start,\n          end = _this$queue$i.end,\n          char = _this$queue$i.char;\n\n      if (this.frame >= end) {\n        complete++;\n        output += to;\n      } else if (this.frame >= start) {\n        if (!char || Math.random() < 0.28) {\n          char = this.randomChar();\n          this.queue[i].char = char;\n        }\n\n        output += \"<span class=\\\"dud\\\">\".concat(char, \"</span>\");\n      } else {\n        output += from;\n      }\n    }\n\n    this.e.innerHTML = output;\n\n    if (complete === this.queue.length) {\n      this.resolve();\n    } else {\n      this.frameRequest = requestAnimationFrame(this.update);\n      this.frame++;\n    }\n  }\n\n  randomChar() {\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\n  }\n\n  render() {\n    const phrases = ['Neo,', 'sooner or later', 'you\\'re going to realize', 'just as I did', 'that there\\'s a difference', 'between knowing the path', 'and walking the path'];\n    const e = document.querySelector('.text');\n    const fx = new ScrambleText(e);\n    let counter = 0;\n\n    const next = () => {\n      fx.setText(phrases[counter]).then(() => {\n        setTimeout(next, 800);\n      });\n      counter = (counter + 1) % phrases.length;\n    };\n\n    next();\n    return React.createElement(\"div\", {\n      className: \"ScrambleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ScrambleText;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/src/components/ScrambleText.jsx"],"names":["React","Component","ScrambleText","constructor","e","state","chars","update","innerText","bind","setText","newText","oldText","console","log","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","render","phrases","document","querySelector","fx","counter","next","then","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './ScrambleText.css'\n\nclass ScrambleText extends Component {\n    constructor(e) {\n        super(e);\n        this.state = {\n        e: this.e,\n        chars:'!<>-_\\\\/[]{}—=+*^?#________',\n        update: this.update,\n        innerText: this.innerText,\n    };\n    this.update.bind(this)\n}\n\n      setText(newText) {\n        const oldText = this.e.innerText;\n        console.log(this.e.innerText);\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise(resolve => this.resolve = resolve);\n        this.queue = [];\n\n        for (let i = 0; i < length; i++) {\n          const from = oldText[i] || '';\n          const to = newText[i] || '';\n          const start = Math.floor(Math.random() * 40);\n          const end = start + Math.floor(Math.random() * 40);\n          this.queue.push({ from, to, start, end });\n        }\n\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n      }\n\n      update() {\n        let output = '';\n        let complete = 0;\n        for (let i = 0, n = this.queue.length; i < n; i++) {\n          let { from, to, start, end, char } = this.queue[i];\n          if (this.frame >= end) {\n            complete++;\n            output += to;\n          } else if (this.frame >= start) {\n            if (!char || Math.random() < 0.28) {\n              char = this.randomChar();\n              this.queue[i].char = char;\n            }\n            output += `<span class=\"dud\">${char}</span>`;\n          } else {\n            output += from;\n          }\n        }\n        \n        this.e.innerHTML = output;\n        if (complete === this.queue.length) {\n          this.resolve();\n        } else {\n          this.frameRequest = requestAnimationFrame(this.update);\n          this.frame++;\n        }\n      }\n\n      randomChar() {\n        return this.chars[Math.floor(Math.random() * this.chars.length)];\n      };\n    ;  \n\nrender() {\n  const phrases = [\n  'Neo,',\n  'sooner or later',\n  'you\\'re going to realize',\n  'just as I did',\n  'that there\\'s a difference',\n  'between knowing the path',\n  'and walking the path'];\n  \n  const e = document.querySelector('.text');\n  const fx = new ScrambleText(e);\n  \n  let counter = 0;\n  const next = () => {\n    fx.setText(phrases[counter]).then(() => {\n      setTimeout(next, 800);\n    });\n    counter = (counter + 1) % phrases.length;\n  };\n  next();\n\n\n\treturn (\n\t\t<div className=\"ScrambleText\">\n            <div className=\"text\"></div>\n            {/* <ScrambleText /> */}\n        </div>\t)\n\n}\n}\n\nexport default ScrambleText;"]},"metadata":{},"sourceType":"module"}