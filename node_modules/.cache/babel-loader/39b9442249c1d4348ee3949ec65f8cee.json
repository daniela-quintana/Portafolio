{"ast":null,"code":"var _curry1 =\n/*#__PURE__*/\nrequire('./internal/_curry1');\n\nvar converge =\n/*#__PURE__*/\nrequire('./converge');\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\n\n\nvar juxt =\n/*#__PURE__*/\n_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\n\nmodule.exports = juxt;","map":{"version":3,"sources":["/Users/osx/Box Sync/Laboratoria/Proyectos/Portafolio/node_modules/ramda/src/juxt.js"],"names":["_curry1","require","converge","juxt","fns","Array","prototype","slice","call","arguments","module","exports"],"mappings":"AAAA,IAAIA,OAAO;AAAG;AAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,QAAQ;AAAG;AAAaD,OAAO,CAAC,YAAD,CAAnC;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,IAAIE,IAAI;AAAG;AAAaH,OAAO,CAAC,SAASG,IAAT,CAAcC,GAAd,EAAmB;AACjD,SAAOF,QAAQ,CAAC,YAAY;AAC1B,WAAOG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAP;AACD,GAFc,EAEZL,GAFY,CAAf;AAGD,CAJ8B,CAA/B;;AAKAM,MAAM,CAACC,OAAP,GAAiBR,IAAjB","sourcesContent":["var _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\nvar converge = /*#__PURE__*/require('./converge');\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\n\n\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nmodule.exports = juxt;"]},"metadata":{},"sourceType":"script"}