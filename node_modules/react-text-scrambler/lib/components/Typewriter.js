"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Scrambler = require("./Scrambler");

var _Scrambler2 = _interopRequireDefault(_Scrambler);

var _Cycler = require("./Cycler");

var _Cycler2 = _interopRequireDefault(_Cycler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Typewriter = function (_React$Component) {
    _inherits(Typewriter, _React$Component);

    function Typewriter() {
        _classCallCheck(this, Typewriter);

        return _possibleConstructorReturn(this, (Typewriter.__proto__ || Object.getPrototypeOf(Typewriter)).apply(this, arguments));
    }

    _createClass(Typewriter, [{
        key: "getCycler",
        value: function getCycler() {
            return _react2.default.createElement(_Cycler2.default, {
                wrap: this.props.wrap,
                duration: this.props.speed,
                strings: this.props.text,
                typewriter: true });
        }
    }, {
        key: "getScrambler",
        value: function getScrambler() {
            return _react2.default.createElement(_Scrambler2.default, {
                wrap: this.props.wrap,
                duration: this.props.speed,
                text: this.props.text,
                typewriter: true });
        }
    }, {
        key: "render",
        value: function render() {
            // If array, use the Cycler.
            var text = this.props.text;


            if (typeof text === "string") {
                return this.getScrambler();
            } else {
                return this.getCycler();
            }
        }
    }]);

    return Typewriter;
}(_react2.default.Component);

Typewriter.propTypes = {
    speed: _propTypes2.default.number,
    delay: _propTypes2.default.number,
    wrap: _propTypes2.default.func,
    text: _propTypes2.default.oneOf(_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string)
};
Typewriter.defaultProps = {
    speed: 3000,
    delay: 1000,

    // Text could be an array of strings, in that case use the Cycler.
    text: "Supply some text to the Typewriter!"
};
exports.default = Typewriter;