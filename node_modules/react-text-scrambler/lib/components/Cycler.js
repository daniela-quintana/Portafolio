"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Scrambler = require("./Scrambler");

var _Scrambler2 = _interopRequireDefault(_Scrambler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cycler = function (_React$Component) {
    _inherits(Cycler, _React$Component);

    function Cycler(props) {
        _classCallCheck(this, Cycler);

        var _this = _possibleConstructorReturn(this, (Cycler.__proto__ || Object.getPrototypeOf(Cycler)).call(this, props));

        _this.state = {
            cycling: true,
            renderText: "",
            previousText: ""
        };


        _this.cycle = _this.cycle.bind(_this);
        _this.cycling = true;
        return _this;
    }

    _createClass(Cycler, [{
        key: "changeRenderText",
        value: function changeRenderText(text, previous) {
            this.setState({ renderText: text, previousText: previous });
        }
    }, {
        key: "cycle",
        value: function cycle() {
            var _this2 = this;

            var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
            var _props = this.props,
                humanLike = _props.humanLike,
                strings = _props.strings,
                onIteration = _props.onIteration,
                iterations = _props.iterations;

            var cycleThis = strings;

            if (humanLike) {
                cycleThis = this.insertChar(strings);
            }

            var iterate = function iterate(total) {
                var iteration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var previous = arguments[2];

                if (typeof onIteration === "function") {
                    onIteration(cycleThis[iteration], iteration);
                }

                if (iterations !== 0 && total >= iterations) {
                    return;
                }

                return setTimeout(function () {
                    if (_this2.state.cycling && _this2.cycling) {
                        _this2.changeRenderText(cycleThis[iteration], previous);
                        _this2.timeout = iterate(total + 1, (iteration + 1) % cycleThis.length, cycleThis[iteration]);
                    }
                }, time);
            };

            this.changeRenderText(cycleThis[0]);
            this.timeout = iterate(0, 1, cycleThis[0]);
        }
    }, {
        key: "stop",
        value: function stop() {
            this.setState({ cycling: false });
            clearTimeout(this.timeout);
        }
    }, {
        key: "insertChar",
        value: function insertChar(array) {
            var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

            return array.reduce(function (accumulator, currentValue) {
                return [].concat(_toConsumableArray(accumulator), [currentValue, char]);
            }, []);
        }
    }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
            var _this3 = this;

            var filter = nextProps.strings.filter(function (str) {
                return !_this3.props.strings.includes(str);
            });

            // Update if the scrambled text changes.
            if (nextState.renderText !== this.state.renderText) {
                return true;
            }

            // If there are no new strings, then don't update
            if (filter.length === 0) {
                return false;
            }

            return true;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props2 = this.props,
                startDelay = _props2.startDelay,
                duration = _props2.duration,
                delay = _props2.delay;


            this.cycling = true;
            this.cycle(startDelay + duration + delay);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.cycling = false;
        }
    }, {
        key: "render",
        value: function render() {
            return _react2.default.createElement(_Scrambler2.default, {
                wrap: this.props.wrap,
                changeFrom: this.state.previousText,
                humanLike: this.props.humanLike,
                duration: this.props.duration,
                startDelay: this.props.startDelay,
                text: this.state.renderText });
        }
    }]);

    return Cycler;
}(_react2.default.Component);

Cycler.propTypes = {
    strings: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    characters: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    humanLike: _propTypes2.default.bool,
    duration: _propTypes2.default.number,
    delay: _propTypes2.default.number,
    startDelay: _propTypes2.default.number,
    iterations: _propTypes2.default.number,
    wrap: _propTypes2.default.func,
    onIteration: _propTypes2.default.func
};
Cycler.defaultProps = {
    strings: ["The Scrambler needs some strings!"],
    characters: "+/\\_-",
    humanLike: false,
    duration: 3000,
    delay: 1000,
    startDelay: 0,
    iterations: 0
};
exports.default = Cycler;